name: Deploy to DigitalOcean

on:
  workflow_run:
    workflows: ["Build and Update Public Branch"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production

    steps:
      - name: Deploy to DigitalOcean droplet
        uses: appleboy/ssh-action@master
        env:
          PDS_HOSTNAME: ${{ secrets.PDS_HOSTNAME }}
          PDS_JWT_SECRET: ${{ secrets.PDS_JWT_SECRET }}
          PDS_ADMIN_PASSWORD: ${{ secrets.PDS_ADMIN_PASSWORD }}
          PDS_PLC_ROTATION_KEY: ${{ secrets.PDS_PLC_ROTATION_KEY }}
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: PDS_HOSTNAME,PDS_JWT_SECRET,PDS_ADMIN_PASSWORD,PDS_PLC_ROTATION_KEY
          script: |
            set -e  # Exit on any error

            echo "Starting deployment..."

            # Stop system nginx if running
            echo "Stopping system services..."
            sudo systemctl stop nginx || true
            sudo systemctl disable nginx || true

            # Kill any process using port 80 or 443
            echo "Clearing ports..."
            sudo lsof -t -i:80 | xargs -r sudo kill -9 || true
            sudo lsof -t -i:443 | xargs -r sudo kill -9 || true

            # Install Docker and dependencies if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker and dependencies..."
              sudo apt update
              sudo apt install -y docker.io docker-compose nginx certbot python3-certbot-nginx
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Install docker compose v2 if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose v2..."
              sudo apt update
              sudo apt install -y curl
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # Verify Docker is running
            if ! systemctl is-active --quiet docker; then
              echo "Starting Docker service..."
              sudo systemctl start docker
            fi

            # Create necessary directories
            echo "Creating directories..."
            sudo mkdir -p /opt/blog
            sudo mkdir -p /pds
            sudo mkdir -p /pds/caddy/data
            sudo mkdir -p /pds/caddy/etc/caddy
            sudo mkdir -p /pds/blocks

            # Create PDS environment file
            echo "Setting up PDS environment..."
            cat << EOF | sudo tee /pds/pds.env
            PDS_HOSTNAME=${PDS_HOSTNAME}
            PDS_JWT_SECRET=${PDS_JWT_SECRET}
            PDS_ADMIN_PASSWORD=${PDS_ADMIN_PASSWORD}
            PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=${PDS_PLC_ROTATION_KEY}
            PDS_DATA_DIRECTORY=/pds
            PDS_BLOBSTORE_DISK_LOCATION=/pds/blocks
            PDS_BLOB_UPLOAD_LIMIT=52428800
            PDS_DID_PLC_URL=https://plc.directory
            PDS_BSKY_APP_VIEW_URL=https://api.bsky.app
            PDS_BSKY_APP_VIEW_DID=did:web:api.bsky.app
            PDS_REPORT_SERVICE_URL=https://mod.bsky.app
            PDS_REPORT_SERVICE_DID=did:plc:ar7c4by46qjdydhdevvrndac
            PDS_CRAWLERS=https://bsky.network
            LOG_ENABLED=true
            EOF

            # Clone/update the main repository for configuration
            echo "Setting up main repository..."
            cd /opt/blog
            if [ ! -d ".git" ]; then
              git clone https://github.com/btuckerc/Blog.git .
              git checkout main
            else
              git fetch origin main
              git checkout main
              git reset --hard origin/main
            fi

            # Set up public directory
            echo "Setting up public files..."
            if [ -d "public" ]; then
              cd public
              if [ -d ".git" ]; then
                git fetch origin public
                git reset --hard origin/public
              else
                cd ..
                rm -rf public
                git clone -b public https://github.com/btuckerc/Blog.git public
              fi
            else
              git clone -b public https://github.com/btuckerc/Blog.git public
            fi

            # Stop any existing containers
            echo "Stopping existing containers..."
            cd /opt/blog
            sudo docker-compose down || true

            # Set up SSL if not already configured
            if [ ! -f "/etc/letsencrypt/live/${PDS_HOSTNAME}/fullchain.pem" ]; then
              echo "Setting up SSL certificates..."
              # Create a temporary nginx configuration for certbot
              cat << EOF | sudo tee /tmp/nginx-temp.conf
            events {
                worker_connections 1024;
            }
            http {
                server {
                    listen 80;
                    server_name ${PDS_HOSTNAME};
                    location / {
                        return 200 'OK';
                    }
                }
            }
            EOF
              # Start temporary nginx and get certificates
              sudo nginx -c /tmp/nginx-temp.conf
              sudo certbot --nginx -d ${PDS_HOSTNAME} --non-interactive --agree-tos --email tucker@btuckerc.com
              sudo nginx -s stop
              sudo rm /tmp/nginx-temp.conf
            fi

            # Start services
            if [ -f "docker-compose.yml" ]; then
              echo "Starting Docker services..."
              sudo docker-compose pull
              sudo docker-compose up -d

              # Wait for services to start
              echo "Waiting for services to start..."
              sleep 10

              # Verify services are running
              echo "Verifying services..."
              if ! sudo docker ps | grep -q "pds"; then
                echo "Error: PDS service failed to start"
                sudo docker logs pds
                exit 1
              fi

              if ! sudo docker ps | grep -q "nginx"; then
                echo "Error: Nginx service failed to start"
                sudo docker logs nginx
                exit 1
              fi
            else
              echo "Error: docker-compose.yml not found"
              exit 1
            fi

            echo "Deployment completed successfully!"
            echo "Running services:"
            sudo docker ps
