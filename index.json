[{"content":"Workspace Boilerplate A comprehensive collection of scripts and configurations for setting up and managing development environments. Features project initialization, environment setup, and configuration management.\nQuick Start Initialize your macOS development environment:\ngit clone https://github.com/btuckerc/boilerplate.git \u0026amp;\u0026amp; cd boilerplate \u0026amp;\u0026amp; ./utils/init-mac There are other setup tools you can explore as well:\n./setup/setup-vscode ./utils/init-project my-project ./utils/scripts/readme.sh Directory Structure . ├── LICENSE # MIT License ├── README.md # This file ├── applications-list.md # List of recommended applications ├── bash_aliases # Bash aliases ├── bash_profile # Bash profile configuration ├── bashrc # Bash shell configuration ├── zsh_aliases # Zsh aliases ├── zprofile # Zsh profile configuration ├── zshrc # Zsh shell configuration ├── config # Configuration files │ ├── kitty/ # Kitty configuration │ │ ├── kitty.conf # Kitty terminal config │ │ └── current-theme.conf # Current Kitty theme │ ├── vscode/ # VSCode configuration │ │ ├── settings.json # Editor settings │ │ ├── snippets/ # Code snippets │ │ └── extensions/ # VSCode extensions │ │ └── current-theme/ # Current theme extension │ └── tmux/ # Tmux configuration │ └── plugins/ # Tmux plugins │ └── tpm/ # Tmux Plugin Manager (submodule) ├── nvim # Neovim configuration │ └── lua/ # Lua configuration files │ └── tucker/ # Personal configuration │ └── core/ # Core configuration │ └── plugins/ # Plugin configuration │ └── themes/ # Theme files │ └── current-theme.lua # Current theme ├── setup # Environment setup scripts │ ├── setup-go.sh # Go environment setup │ ├── setup-py.sh # Python environment setup │ ├── setup-git.sh # Git configuration setup │ ├── setup-kitty.sh # Kitty terminal setup │ ├── setup-vscode.sh # VSCode setup │ ├── setup-supabase.sh # Supabase environment setup │ └── setup-tailwind.sh # Tailwind CSS setup ├── templates # Project templates │ ├── go # Go project template │ └── python # Python project template └── utils # Utility scripts ├── init-mac # macOS environment setup ├── init-project # Project initialization ├── fonts # Custom font files │ ├── MesloLGLNerdFont-Bold.ttf # Meslo Nerd Font Bold │ ├── MesloLGLNerdFont-BoldItalic.ttf # Meslo Nerd Font Bold Italic │ ├── MesloLGLNerdFont-Italic.ttf # Meslo Nerd Font Italic │ └── MesloLGLNerdFont-Regular.ttf # Meslo Nerd Font Regular └── scripts # Shell script utilities ├── common.sh # Common shell functions ├── convert-kitty-theme-nvim.sh # Theme converter for Neovim ├── convert-kitty-theme-vscode.sh # Theme converter for VSCode ├── fix-nvim-symlink.sh # Neovim symlink fixer ├── readme.sh # README generator ├── tree.sh # Directory tree generator └── bash-to-zsh.sh # Shell conversion utility TODO make sure brew install glow make sure starship can be installed Features macOS Environment Setup # Complete environment setup ./utils/init-mac # Setup with specific shell ./utils/init-mac -s zsh # Skip Kitty terminal installation ./utils/init-mac -k # Skip Homebrew installation ./utils/init-mac -b The init-mac script sets up:\nShell configuration (Bash or Zsh) Homebrew package manager Kitty terminal with themes Custom Meslo Nerd Fonts Neovim editor with configuration Tmux with configuration Development environment Shell Configuration Support for both Bash and Zsh:\n# Bash configuration ln -s $(pwd)/bashrc ~/.bashrc ln -s $(pwd)/bash_profile ~/.bash_profile ln -s $(pwd)/bash_aliases ~/.bash_aliases # Zsh configuration ln -s $(pwd)/zshrc ~/.zshrc ln -s $(pwd)/zprofile ~/.zprofile ln -s $(pwd)/zsh_aliases ~/.zsh_aliases Project Initialization # Create a new Python project ./init-project my-project # Create a new Go project ./init-project -l go my-project # Initialize in current directory ./init-project --lang python # Specify Python version ./init-project my-project -v 3.11 Environment Setup # Set up Python environment ./setup/setup-py [--version 3.13] # Set up Go environment ./setup/setup-go # Set up Git configuration ./setup-git # Set up Kitty terminal ./setup-kitty # Set up Tailwind CSS ./setup-tailwind # Set up Supabase ./setup-supabase Utility Scripts Directory Tree Generation ./utils/scripts/tree.sh [-p] [-d DEPTH] [-e EXCLUDE] README Generation ./utils/scripts/readme.sh [DIRECTORY] [-f] Theme Conversion ./utils/scripts/convert-kitty-theme-nvim.sh input.conf output.lua Project Templates Python Template Project structure Virtual environment setup Testing configuration README template Requirements management Go Template Standard layout Go modules Basic main package Test setup Makefile Editor Configuration VSCode Configuration Optimized settings Custom snippets Keyboard shortcuts Recommended extensions Automatic theme conversion from Kitty themes Integrated theme extension management Symlinked configuration for version control Automatic backup of existing configurations User-specific theme publisher ID # Set up VSCode configuration ./setup/setup-vscode.sh # Features: - Symlinks settings.json to repository - Sets up custom theme extension - Preserves existing extensions - Creates backups of existing configs - Manages theme conversion and updates Theme Management # Convert Kitty theme to VSCode theme ./utils/scripts/convert-kitty-theme-vscode.sh # Features: - Extracts colors from Kitty themes - Generates VSCode-compatible theme files - Creates proper extension structure - Uses current user as publisher ID - Sets up bidirectional symlinks - Preserves existing themes - Creates automatic backups The theme conversion scripts automatically:\nExtract colors from Kitty themes Generate compatible theme files Set up proper symlinks for version control Install as VSCode extension (for VSCode themes) Update tab bar colors (for Neovim themes) Create backups of existing configurations Use system username as publisher ID Enable bidirectional editing (changes reflect in both locations) Neovim Configuration Modern setup with:\nLSP support (Mason) Treesitter Telescope Git integration Copilot Custom themes with Kitty theme sync Completion (nvim-cmp) Terminal Configuration Kitty terminal setup Multiple themes Alacritty config Starship prompt Tmux configuration with TPM (Tmux Plugin Manager) Automatic plugin installation Sensible defaults Session management (resurrect \u0026amp; continuum) System clipboard integration (yank) yazi Setup Install yazi brew install yazi ffmpegthumbnailer ffmpeg sevenzip jq poppler fd ripgrep fzf zoxide imagemagick font-symbols-only-nerd-font Development Prerequisites macOS (primary support) Git Bash 3.2+ or Zsh Installation Clone the repository with submodules: git clone --recursive https://github.com/YOUR_USERNAME/boilerplate.git If you\u0026rsquo;ve already cloned the repository, initialize submodules: git submodule update --init --recursive Run the setup script: ./utils/init-mac Submodules This repository uses Git submodules for certain components:\nTPM (Tmux Plugin Manager) - config/tmux/plugins/tpm Update TPM after installation:\ngit submodule update --init --recursive To update submodules to their latest versions:\ngit submodule update --remote Contributing Fork the repository Create feature branch Commit changes Push to branch Open Pull Request Adding New Scripts Follow naming convention Add license header Include documentation Update README Update lexicon.md ","permalink":"https://btuckerc.com/blog-posts/2024-12-22-sharing-my-dev-settings/","summary":"\u003ch1 id=\"workspace-boilerplate\"\u003eWorkspace Boilerplate\u003c/h1\u003e\n\u003cp\u003eA comprehensive collection of scripts and configurations for setting up and managing development environments. Features project initialization, environment setup, and configuration management.\u003c/p\u003e\n\u003ch2 id=\"quick-start\"\u003eQuick Start\u003c/h2\u003e\n\u003cp\u003eInitialize your macOS development environment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone https://github.com/btuckerc/boilerplate.git \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e boilerplate \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e ./utils/init-mac\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere are other setup tools you can explore as well:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./setup/setup-vscode\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/init-project my-project\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/scripts/readme.sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"directory-structure\"\u003eDirectory Structure\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.\n├── LICENSE                                    # MIT License\n├── README.md                                  # This file\n├── applications-list.md                       # List of recommended applications\n├── bash_aliases                               # Bash aliases\n├── bash_profile                               # Bash profile configuration\n├── bashrc                                     # Bash shell configuration\n├── zsh_aliases                                # Zsh aliases\n├── zprofile                                   # Zsh profile configuration\n├── zshrc                                      # Zsh shell configuration\n├── config                                     # Configuration files\n│   ├── kitty/                                 # Kitty configuration\n│   │   ├── kitty.conf                         # Kitty terminal config\n│   │   └── current-theme.conf                 # Current Kitty theme\n│   ├── vscode/                                # VSCode configuration\n│   │   ├── settings.json                      # Editor settings\n│   │   ├── snippets/                          # Code snippets\n│   │   └── extensions/                        # VSCode extensions\n│   │       └── current-theme/                 # Current theme extension\n│   └── tmux/                                  # Tmux configuration\n│       └── plugins/                           # Tmux plugins\n│           └── tpm/                           # Tmux Plugin Manager (submodule)\n├── nvim                                       # Neovim configuration\n│   └── lua/                                   # Lua configuration files\n│       └── tucker/                            # Personal configuration\n│           └── core/                          # Core configuration\n│           └── plugins/                       # Plugin configuration\n│           └── themes/                        # Theme files\n│               └── current-theme.lua          # Current theme\n├── setup                                      # Environment setup scripts\n│   ├── setup-go.sh                            # Go environment setup\n│   ├── setup-py.sh                            # Python environment setup\n│   ├── setup-git.sh                           # Git configuration setup\n│   ├── setup-kitty.sh                         # Kitty terminal setup\n│   ├── setup-vscode.sh                        # VSCode setup\n│   ├── setup-supabase.sh                      # Supabase environment setup\n│   └── setup-tailwind.sh                      # Tailwind CSS setup\n├── templates                                  # Project templates\n│   ├── go                                     # Go project template\n│   └── python                                 # Python project template\n└── utils                                      # Utility scripts\n    ├── init-mac                               # macOS environment setup\n    ├── init-project                           # Project initialization\n    ├── fonts                                  # Custom font files\n    │   ├── MesloLGLNerdFont-Bold.ttf          # Meslo Nerd Font Bold\n    │   ├── MesloLGLNerdFont-BoldItalic.ttf    # Meslo Nerd Font Bold Italic\n    │   ├── MesloLGLNerdFont-Italic.ttf        # Meslo Nerd Font Italic\n    │   └── MesloLGLNerdFont-Regular.ttf       # Meslo Nerd Font Regular\n    └── scripts                                # Shell script utilities\n        ├── common.sh                          # Common shell functions\n        ├── convert-kitty-theme-nvim.sh        # Theme converter for Neovim\n        ├── convert-kitty-theme-vscode.sh      # Theme converter for VSCode\n        ├── fix-nvim-symlink.sh                # Neovim symlink fixer\n        ├── readme.sh                          # README generator\n        ├── tree.sh                            # Directory tree generator\n        └── bash-to-zsh.sh                     # Shell conversion utility\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"todo\"\u003eTODO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e make sure brew install glow\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e make sure starship can be installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"features\"\u003eFeatures\u003c/h2\u003e\n\u003ch3 id=\"macos-environment-setup\"\u003emacOS Environment Setup\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Complete environment setup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/init-mac\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Setup with specific shell\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/init-mac -s zsh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Skip Kitty terminal installation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/init-mac -k\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Skip Homebrew installation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./utils/init-mac -b\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003einit-mac\u003c/code\u003e script sets up:\u003c/p\u003e","title":"Sharing my dev settings"},{"content":"I can take notes, why not blog! This post outlines how I built a blog that leverages Hugo for static site generation and Obsidian for note-taking. On top of that, I deployed everything to a DigitalOcean droplet and integrated the site with my own Bluesky PDS.\nPart 0: Why? I\u0026rsquo;ve been trying to revamp a lot of how I\u0026rsquo;m interfacing with my laptop. I\u0026rsquo;ve been getting into using Obsidian, with all it\u0026rsquo;s linking and tagging, and thought it might be nice to have some kind of \u0026ldquo;blog\u0026rdquo; where I can drag and drop info from my Obsidian right into the blog. I have also had the thought for a while: what if I didn\u0026rsquo;t have to deal with formatting and could just push Markdown files to handle formatting for me. I was watching an NVIM user\u0026rsquo;s video recently (probably primeagen or Teej) and heard mention of Hugo. So I got to work:\nPart 1: Local Setup Creating the Hugo Site To begin, I installed and configured Hugo on my Mac. I used Homebrew:\n# Install Hugo on macOS brew install hugo # Create a new Hugo site hugo new site Blog cd Blog # Initialize Git and set main as the default branch git init git branch -M main # Add the Paper theme as a submodule git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper # Create basic directory structure mkdir -p content/Blog-Posts mkdir -p content/Blog-Attachments mkdir -p static/images Setting Up Obsidian Integration I prefer writing posts in Obsidian, even if a normal .md file can be served. To keep everything in sync, I created symbolic links (symlinks) from my local Hugo content directories to my Obsidian vault:\n# Adjust paths to match your own system layout ln -sf /Users/tucker/Documents/GitHub/Blog/content/Blog-Posts ~/Documents/00-Vault/00\\ -\\ Inbox/07\\ -\\ BLOG ln -sf /Users/tucker/Documents/GitHub/Blog/content/Blog-Attachments ~/Documents/00-Vault/00\\ -\\ Inbox/07\\ -\\ BLOG With these symlinks, any changes I make in Obsidian are automatically reflected in my Hugo content folder.\nI also set up a templater to handle all different parameters with individual posts:\nPart 2: Infrastructure Setup Creating a DigitalOcean Droplet To host the site, I set up a DigitalOcean droplet. I was already kinda grandfathered in from having my OG-bsky atproto serving from there. I had to SSH into it to set up the necessary directories:\n# SSH into your new droplet ssh -i ~/.ssh/btuckerc-do_nok root@DROPLET_IP # Create a directory for your blog mkdir -p /opt/blog Setting Up GitHub Actions To automate building and deploying, I rely on GitHub Actions. In your repository, create a .github/workflows directory with two workflow files.\nbuild.yml for building the site:\nname: Build and Update Public Branch on: push: branches: - main permissions: contents: write jobs: build-and-update-public: runs-on: ubuntu-latest env: HUGO_BASEURL: https://btuckerc.com HUGO_ENV: production HUGO_ENABLEGITINFO: true steps: - name: Checkout main uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 # ... (more steps in the actual file) deploy.yml for deploying to DigitalOcean:\nname: Deploy to DigitalOcean on: workflow_run: workflows: [\u0026#34;Build and Update Public Branch\u0026#34;] types: - completed branches: - main # ... (more configuration in the actual file) Part 3: Bluesky PDS Integration Setting Up the PDS Server I also run my own Bluesky Personal Data Server (PDS). Below is an excerpt from my docker-compose.yml:\nservices: pds: image: ghcr.io/bluesky-social/pds:latest restart: unless-stopped depends_on: - nginx environment: - PDS_HOSTNAME=${PDS_HOSTNAME} - PDS_JWT_SECRET=${PDS_JWT_SECRET} # ... more environment variables Nginx Configuration To serve both the static blog and the PDS endpoints on the same droplet, I configured Nginx like so:\nserver { listen 443 ssl; server_name btuckerc.com; # Blog content location / { root /usr/share/nginx/html; index index.html; try_files $uri $uri/ =404; } # PDS endpoints location /.well-known/ { proxy_pass http://pds:3000/.well-known/; # ... more proxy settings } } Part 4: The Final Touches Environment Secrets In your GitHub repository, set up these secrets to ensure secure deployments and PDS functionality:\nDROPLET_IP DROPLET_USER SSH_PRIVATE_KEY PDS_HOSTNAME PDS_JWT_SECRET PDS_ADMIN_PASSWORD PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX Automatic Image Processing For Obsidian-style image links, I wrote a simple script (migrate_attachments.sh) to convert them into standard Markdown references and ensure the files end up in the right locations:\n#!/bin/bash # This script converts Obsidian-style image links to standard markdown # and ensures images are in the correct locations # ... (script contents in the repo) Part 5: Customizing Layouts Overwriting Theme Files One of the key aspects of personalizing my blog was implementing custom layouts to overwrite the default files from the theme. This allowed me to tailor the appearance and functionality to better suit my needs. By creating custom layout files in the layouts directory, I was able to override the theme\u0026rsquo;s default templates and have my own little touches on format and styling.\nPart 6: Search Functionality Re-Implementing Search I had fun re-implementing the search functionality in the assets directory. This involved customizing the JavaScript and CSS to enhance the search experience on my blog. I wanted users to be able to query for a word and have the results highlighted, with a few rows of content displayed before and after each result. This made it easier for users to find relevant information quickly and efficiently.\nPart 13: Copy/Share and Pinning Features Enhancing User Interaction To improve user interaction, I implemented my own copy/share functionality on blog posts. This allows readers to easily share content with others or save it for later reference. Additionally, I added a pinning feature, enabling users to pin their favorite posts for quick access.\nPart 7: DigitalOcean Droplet Management Handling Misconfigurations During the setup, I encountered several misconfigurations that required me to stop and restart the DigitalOcean droplet a lot. Doing it again, it\u0026rsquo;s not the end of the world to destroy the droplets then set them back up. But definitely frustrating.\nPart 8: GitHub Secrets Management Learning from Mistakes Managing secrets in GitHub was another challenge. I initially misconfigured some secrets, which led to deployment issues. Thankfully this didn\u0026rsquo;t require destroying and reconfiguring droplets\u0026hellip; but still not fun.\nPart 9: Integration with Obsidian Seamless Content Management My goal was to have a blog integrated with Obsidian, where I already take notes. This setup allows me to move content over and publish it with ease. Deciding where to store content—between Obsidian sync and GitHub—was initially challenging, but I eventually settled on using both for optimal workflow.\nPart 10: DNS/CNAME Configuration Connecting Squarespace Domain Setting the DNS/CNAME entry in my Squarespace domain to point to the DigitalOcean droplet was a crucial step. This configuration ensures that my domain correctly routes traffic to the blog hosted on the droplet, providing a seamless experience for visitors.\nPart 11: AT Protocol and Bluesky Handle Integrating AT Protocol I aimed to have the AT Protocol running to register my Bluesky handle while ensuring the frontend was engaging and informative. This integration was crucial for providing a seamless user experience and showcasing the capabilities of the Bluesky PDS.\nPart 12: Customizing the Paper Theme Why Paper Stood Out The Paper theme initially caught my attention due to its clean and minimalist design. However, I found it necessary to tweak certain aspects to better align with my blog\u0026rsquo;s aesthetic and functional requirements. These customizations allowed me to maintain the theme\u0026rsquo;s simplicity while adding unique touches.\nThe Result Here’s a summary of what this setup achieves:\nHugo for a fast, secure static blog Obsidian for a modern writing experience GitHub Actions to automate builds and deployments DigitalOcean for hosting and SSL Bluesky PDS for decentralized social features What\u0026rsquo;s Next? I plan to extend this setup with:\nA commenting system Analytics Additional Bluesky integrations Keep an eye on future posts for these updates!\nUseful Resources Hugo Documentation PaperMod Theme Bluesky PDS Documentation DigitalOcean Tutorials The repository is public if you want to check it out.\n","permalink":"https://btuckerc.com/blog-posts/2024-12-22-setting-up-a-blog-with-obsidian-and-hugo/","summary":"\u003ch1 id=\"i-can-take-notes-why-not-blog\"\u003eI can take notes, why not blog!\u003c/h1\u003e\n\u003cp\u003eThis post outlines how I built a blog that leverages Hugo for static site generation and Obsidian for note-taking. On top of that, I deployed everything to a DigitalOcean droplet and integrated the site with my own Bluesky PDS.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" onclick=\"showLightbox('../Blog-Attachments/2024-12-22-Setting-up-a-Blog-with-Obsidian-and-Hugo-3.png')\" src=\"../Blog-Attachments/2024-12-22-Setting-up-a-Blog-with-Obsidian-and-Hugo-3.png\" style=\"cursor: pointer;\" width=\"500\"\u003e\n\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"part-0-why\"\u003ePart 0: Why?\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;ve been trying to revamp a lot of how I\u0026rsquo;m interfacing with my laptop. I\u0026rsquo;ve been getting into using Obsidian, with all it\u0026rsquo;s linking and tagging, and thought it might be nice to have some kind of \u0026ldquo;blog\u0026rdquo; where I can drag and drop info from my Obsidian right into the blog. I have also had the thought for a while: what if I didn\u0026rsquo;t have to deal with formatting and could just push Markdown files to handle formatting for me. I was watching an NVIM user\u0026rsquo;s video recently (probably primeagen or Teej) and heard mention of Hugo. So I got to work:\u003c/p\u003e","title":"Setting up a Blog with Obsidian and Hugo"}]